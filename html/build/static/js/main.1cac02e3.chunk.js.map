{"version":3,"sources":["QuillComponent.view.tsx","models.ts","QuillComponent.tsx","serviceWorker.js","index.js"],"names":["MessageInstruction","QuillComponentView","addDebugMessage","debugMessages","content","defaultValue","isReadOnly","modules","onChange","onChangeSelection","onFocus","onBlur","onKeyPress","onKeyDown","onKeyUp","onQuillRef","style","toolbar","readOnly","ref","component","value","ContentType","detect","require","QuillEditorComponent","props","quillRef","componentDidMount","setState","browser","state","sendMessage","instruction","QUILL_READY","error","document","addEventListener","handleMessage","DOCUMENT_EVENT_LISTENER_ADDED","window","WINDOW_EVENT_LISTENER_ADDED","componentDidUpdate","prevProps","prevState","isDesktopBrowser","console","log","isEqual","doShowQuillComponentDebugMessages","height","setQuillContainerHeight","toolbarHeight","editor","theme","container","clientHeight","htmlElement","Sizzle","Math","floor","componentWillUnmount","removeEventListener","DOCUMENT_EVENT_LISTENER_REMOVED","WINDOW_EVENT_LISTENER_REMOVED","msg","JSON","stringify","event","data","message","ReactNativeWebView","postMessage","html","delta","source","getContents","CONTENT_CHANGED","payload","getHTML","text","getText","range","ON_CHANGE_SELECTION","selection","getSelection","ON_FOCUS","previousRange","ON_BLUR","ON_KEY_PRESS","ON_KEY_DOWN","ON_KEY_UP","shouldRenderQuillComponentView","find","OS","os","toLowerCase","includes","backgroundColor","ops","insert","attributes","bold","color","this","maxHeight","overflow","padding","position","bottom","left","right","zIndex","id","map","index","key","React","Component","Boolean","location","hostname","match","ReactDOM","render","QuillComponent","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cac02e3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\"; // ES6\r\nimport { Delta } from \"quill\";\r\n\r\nimport * as CSS from \"csstype\";\r\n\r\ninterface Props {\r\n  addDebugMessage?: (message: string) => void;\r\n  content?: string | any | undefined;\r\n  debugMessages?: string[];\r\n  defaultValue?: string | any | undefined;\r\n  height?: number;\r\n  isReadOnly?: boolean;\r\n  modules?: object;\r\n  onChange?: (content: string, delta: Delta, source: any, editor: any) => void;\r\n  onChangeSelection?: (range: any, source: any, editor: any) => void;\r\n  onFocus?: (range: any, source: any, editor: any) => void;\r\n  onBlur?: (previousRange: any, source: any, editor: any) => void;\r\n  onKeyPress?: (event: any) => void;\r\n  onKeyDown?: (event: any) => void;\r\n  onKeyUp?: (event: any) => void;\r\n  onQuillRef: (quillRef: any) => void;\r\n  style?: CSS.Properties;\r\n}\r\n\r\nexport const QuillComponentView = ({\r\n  addDebugMessage = () => {},\r\n  debugMessages = [],\r\n  content,\r\n  defaultValue,\r\n  isReadOnly = false,\r\n  modules = {},\r\n  onChange,\r\n  onChangeSelection,\r\n  onFocus,\r\n  onBlur,\r\n  onKeyPress,\r\n  onKeyDown,\r\n  onKeyUp,\r\n  onQuillRef,\r\n  style\r\n}: Props) => {\r\n  const getModules = (): object => {\r\n    if (isReadOnly) {\r\n      return {\r\n        ...modules,\r\n        toolbar: false\r\n      };\r\n    }\r\n    return modules;\r\n  };\r\n\r\n  const getContentProps = () => {\r\n    if (content) {\r\n      return { value: content };\r\n    }\r\n    if (defaultValue) {\r\n      return { defaultValue };\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <ReactQuill\r\n      modules={getModules()}\r\n      onChange={onChange}\r\n      onChangeSelection={onChangeSelection}\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      onKeyPress={onKeyPress}\r\n      onKeyDown={onKeyDown}\r\n      onKeyUp={onKeyUp}\r\n      readOnly={isReadOnly}\r\n      ref={(component: any) => {\r\n        onQuillRef(component);\r\n      }}\r\n      style={style}\r\n      {...getContentProps()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default QuillComponentView;\r\n","import * as React from \"react\";\r\nimport * as Quill from \"quill\";\r\nimport * as ReactQuill from \"react-quill\";\r\nimport { DeltaOperation } from \"quill\";\r\nimport CSS from 'csstype';\r\n\r\nexport enum MessageInstruction {\r\n  DOCUMENT_EVENT_LISTENER_ADDED = \"DOCUMENT_EVENT_LISTENER_ADDED\",\r\n  DOCUMENT_EVENT_LISTENER_REMOVED = \"DOCUMENT_EVENT_LISTENER_REMOVED\",\r\n  WINDOW_EVENT_LISTENER_ADDED = \"WINDOW_EVENT_LISTENER_ADDED\",\r\n  WINDOW_EVENT_LISTENER_REMOVED = \"WINDOW_EVENT_LISTENER_REMOVED\",\r\n  QUILL_READY = \"QUILL_READY\",\r\n  GET_CONTENT = \"GET_CONTENT\",\r\n  SET_CONTENT = \"SET_CONTENT\",\r\n  CONTENT_CHANGED = \"CONTENT_CHANGED\",\r\n  UNABLE_TO_ADD_EVENT_LISTENER = \"UNABLE_TO_ADD_EVENT_LISTENER\",\r\n  COMPONENT_MOUNTED = \"COMPONENT_MOUNTED\",\r\n  ON_CHANGE_SELECTION = \"ON_CHANGE_SELECTION\",\r\n  ON_FOCUS = \"ON_FOCUS\",\r\n  ON_BLUR = \"ON_BLUR\",\r\n  ON_KEY_PRESS = \"ON_KEY_PRESS\",\r\n  ON_KEY_DOWN = \"ON_KEY_DOWN\",\r\n  ON_KEY_UP = \"ON_KEY_UP\"\r\n}\r\n\r\nexport interface DeltaObject {\r\n  ops: DeltaOperation[];\r\n}\r\nexport interface ReactNativeWebViewQuillJSComponentProps {\r\n  backgroundColor?: any; // this can be set by user\r\n  content?: string | DeltaOperation[];\r\n  defaultValue?: string | DeltaOperation[];\r\n  doShowDebugMessages?: boolean;\r\n  doShowQuillComponentDebugMessages: boolean;\r\n  height?: number;\r\n  isReadOnly?: boolean;\r\n  loadingIndicator?: () => React.ReactElement;\r\n  onContentChange?: (content: string, delta: DeltaOperation[]) => void;\r\n  onError?: (syntheticEvent:any) => void;\r\n  onLoadEnd?: () => void;\r\n  onLoadStart?: () => void;\r\n  onMessageReceived?: (message: object) => void;\r\n  style?: CSS.Properties;\r\n}\r\n\r\nexport interface WebViewQuillJSMessage {\r\n  instruction?: MessageInstruction;\r\n  payload?: SetContentPayload | any;\r\n  error?: string;\r\n}\r\n\r\nexport interface SetContentPayload {\r\n  html: string;\r\n  delta: DeltaOperation[];\r\n}\r\n\r\nexport interface StartupMessage {\r\n  backgroundColor: string;\r\n  defaultValue: string | DeltaOperation[];\r\n  doShowQuillComponentDebugMessages: boolean;\r\n  height: number;\r\n  isReadOnly: boolean;\r\n}\r\n\r\nexport { Quill } from \"quill\";\r\n","import React from \"react\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport { Delta, DeltaOperation } from \"quill\";\r\nimport QuillComponentView from \"./QuillComponent.view\";\r\nimport { DeltaObject, WebViewQuillJSMessage, MessageInstruction } from \"./models\";\r\nimport Sizzle from \"sizzle\";\r\n// @ts-ignore\r\nimport isEqual from \"lodash.isequal\";\r\nconst { detect } = require(\"detect-browser\");\r\n\r\nexport enum ContentType {\r\n  DELTA = \"DELTA\",\r\n  HTML = \"HTML\"\r\n}\r\ninterface State {\r\n  backgroundColor: string;\r\n  browser: { name: string; os: string; version: string } | null;\r\n  content: string | Delta;\r\n  defaultValue: string | DeltaObject;\r\n  delta: DeltaOperation[];\r\n  debugMessages: string[];\r\n  doShowQuillComponentDebugMessages: boolean;\r\n  height: number;\r\n  html: string;\r\n  isDesktopBrowser: boolean;\r\n  isReadOnly: boolean | null;\r\n  modules: object;\r\n  toolbarHeight: number;\r\n}\r\n\r\nclass QuillEditorComponent extends React.Component<null, State> {\r\n  private quillRef = null;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      backgroundColor: 'aliceblue',\r\n      browser: null,\r\n      debugMessages: [\"test message\"],\r\n      doShowQuillComponentDebugMessages: false,\r\n      defaultValue:{\r\n        ops: [\r\n          { insert: \"Gandalf\", attributes: { bold: true } },\r\n          { insert: \" the \" },\r\n          { insert: \"Grey\", attributes: { color: \"#ccc\" } }\r\n        ]\r\n      },\r\n      content: \"\",\r\n      delta: [],\r\n      height: 300,\r\n      html: \"\",\r\n      isDesktopBrowser: false,\r\n      isReadOnly: null,\r\n      modules: {},\r\n      toolbarHeight: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState(\r\n      {\r\n        browser: detect(),\r\n        debugMessages: [...this.state.debugMessages, \"componentDidMount\"]\r\n      },\r\n      () => {\r\n        try {\r\n          this.sendMessage({\r\n            instruction: MessageInstruction.QUILL_READY\r\n          });\r\n        } catch (error) {\r\n          this.addDebugMessage(error);\r\n        }\r\n\r\n        if (document) {\r\n          document.addEventListener(\"message\", this.handleMessage);\r\n          this.addDebugMessage(\"set document listeners\");\r\n          this.sendMessage({\r\n            instruction: MessageInstruction.DOCUMENT_EVENT_LISTENER_ADDED\r\n          });\r\n        }\r\n        if (window) {\r\n          window.addEventListener(\"message\", this.handleMessage);\r\n          this.addDebugMessage(\"setting Window\");\r\n          this.sendMessage({\r\n            instruction: MessageInstruction.WINDOW_EVENT_LISTENER_ADDED\r\n          });\r\n        }\r\n        if (!document && !window) {\r\n          this.sendMessage({\r\n            error: \"UNABLE_TO_ADD_EVENT_LISTENER\"\r\n          });\r\n          return;\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidUpdate = (prevProps: any, prevState: State) => {\r\n    const { browser, debugMessages, isDesktopBrowser } = this.state;\r\n    if (debugMessages !== prevState.debugMessages) {\r\n      console.log(debugMessages);\r\n    }\r\n    if (!isEqual(browser, prevState.browser)) {\r\n      this.setState({ isDesktopBrowser: this.isDesktopBrowser() }, () => {\r\n        console.log(this.state);\r\n      });\r\n    }\r\n    if (isDesktopBrowser && !prevState.isDesktopBrowser) {\r\n      this.setState({\r\n        doShowQuillComponentDebugMessages: true,\r\n        height: 300\r\n      });\r\n    }\r\n  };\r\n\r\n  private onQuillRef = (ref: any) => {\r\n    const { isReadOnly } = this.state;\r\n    if (this.quillRef === null) {\r\n      this.quillRef = ref;\r\n      if (!isReadOnly) {\r\n        this.setQuillContainerHeight(this.quillRef);\r\n      }\r\n    }\r\n  };\r\n\r\n  // adjust the height of the editor container if there is a toolbar added\r\n  private setQuillContainerHeight = (quillRef: any) => {\r\n    try {\r\n      // want to switch this to optional chaining at some point\r\n      const toolbarHeight =\r\n        quillRef.editor.theme.modules.toolbar.container.clientHeight;\r\n      let res: Element[] = Sizzle(\".ql-container\");\r\n      const htmlElement: HTMLElement = res[0] as HTMLElement;\r\n      if (htmlElement.style) {\r\n        // the extra subtracted pixel is to make the editor component cleaner looking\r\n        htmlElement.style.height = `${Math.floor(this.state.height - toolbarHeight-1)}px`;\r\n      }\r\n       \r\n    } catch (error) {\r\n     this.addDebugMessage(error);\r\n    }\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    if (document) {\r\n      document.removeEventListener(\"message\", this.handleMessage);\r\n      this.sendMessage({\r\n        instruction: MessageInstruction.DOCUMENT_EVENT_LISTENER_REMOVED\r\n      });\r\n    }\r\n    if (window) {\r\n      window.removeEventListener(\"message\", this.handleMessage);\r\n      this.sendMessage({\r\n        instruction: MessageInstruction.WINDOW_EVENT_LISTENER_REMOVED\r\n      });\r\n    }\r\n  };\r\n\r\n  private addDebugMessage = (msg: any) => {\r\n    if (typeof msg === \"object\") {\r\n      this.addDebugMessage(\"STRINGIFIED\");\r\n      this.setState({\r\n        debugMessages: [\r\n          ...this.state.debugMessages,\r\n          JSON.stringify(msg, null, 4)\r\n        ]\r\n      });\r\n    } else {\r\n      this.setState({ debugMessages: [...this.state.debugMessages, msg] });\r\n    }\r\n  };\r\n\r\n  private handleMessage = (event: any) => {\r\n    this.addDebugMessage(event.data);\r\n    try {\r\n      this.setState({ ...this.state, ...event.data });\r\n    } catch (error) {\r\n      this.addDebugMessage({ error: JSON.stringify(error) });\r\n    }\r\n  };\r\n\r\n  protected sendMessage = (message: WebViewQuillJSMessage) => {\r\n    // @ts-ignore\r\n    if (window.ReactNativeWebView) {\r\n      // @ts-ignore\r\n      window.ReactNativeWebView.postMessage(JSON.stringify(message));\r\n      console.log(\"sendMessage  \", JSON.stringify(message));\r\n    }\r\n  };\r\n\r\n  private onChange = (html: string, delta: Delta, source: any, editor: any) => {\r\n    editor.getContents();\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.CONTENT_CHANGED,\r\n      payload: {\r\n        html: editor.getHTML(),\r\n        delta: editor.getContents(),\r\n        text: editor.getText(),\r\n        source,\r\n        editor\r\n      }\r\n    });\r\n  };\r\n\r\n  private onChangeSelection = (range: any, source: any, editor: any) => {\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.ON_CHANGE_SELECTION,\r\n      payload: {\r\n        range,\r\n        selection: editor.getSelection(),\r\n        html: editor.getHTML(),\r\n        delta: editor.getContents(),\r\n        text: editor.getText(),\r\n        source,\r\n        editor\r\n      }\r\n    });\r\n  };\r\n  private onFocus = (range: any, source: any, editor: any) => {\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.ON_FOCUS,\r\n      payload: { range, source, editor }\r\n    });\r\n  };\r\n  private onBlur = (previousRange: any, source: any, editor: any) => {\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.ON_BLUR,\r\n      payload: { previousRange, source, editor }\r\n    });\r\n  };\r\n  private onKeyPress = (event: any) => {\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.ON_KEY_PRESS,\r\n      payload: { event }\r\n    });\r\n  };\r\n  private onKeyDown = (event: any) => {\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.ON_KEY_DOWN,\r\n      payload: { event }\r\n    });\r\n  };\r\n  private onKeyUp = (event: any) => {\r\n    this.sendMessage({\r\n      instruction: MessageInstruction.ON_KEY_UP,\r\n      payload: { event }\r\n    });\r\n  };\r\n\r\n  private shouldRenderQuillComponentView = (): boolean => {\r\n    const { isReadOnly } = this.state;\r\n    const isDesktopBrowser = this.isDesktopBrowser();\r\n    return isReadOnly !== null || isDesktopBrowser;\r\n  };\r\n\r\n  private isDesktopBrowser = (): boolean => {\r\n    const desktopOSNames = [\"windows\"];\r\n\r\n    return !!desktopOSNames.find((OS: string) => {\r\n      let isBrowser = this.state.browser?.os?.toLowerCase().includes(OS);\r\n      return isBrowser;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      backgroundColor,\r\n      content,\r\n      debugMessages,\r\n      defaultValue,\r\n      doShowQuillComponentDebugMessages,\r\n      height,\r\n      isReadOnly,\r\n      toolbarHeight\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        {this.shouldRenderQuillComponentView() && (\r\n          // @ts-ignore\r\n          <QuillComponentView\r\n            addDebugMessage={this.addDebugMessage}\r\n            content={content}\r\n            debugMessages={debugMessages}\r\n            defaultValue={defaultValue}\r\n            height={height}\r\n            onChange={this.onChange}\r\n            onChangeSelection={this.onChangeSelection}\r\n            onFocus={this.onFocus}\r\n            onBlur={this.onBlur}\r\n            onKeyPress={this.onKeyPress}\r\n            onKeyDown={this.onKeyDown}\r\n            onKeyUp={this.onKeyUp}\r\n            isReadOnly={isReadOnly as boolean}\r\n            onQuillRef={this.onQuillRef}\r\n            style={{backgroundColor, height: `${height}px`}}\r\n          />\r\n        )}\r\n        {doShowQuillComponentDebugMessages && (\r\n          <div\r\n            style={{\r\n              backgroundColor: \"orange\",\r\n              maxHeight: \"200px\",\r\n              overflow: \"auto\",\r\n              padding: 5,\r\n              position: \"fixed\",\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n              zIndex: 15000\r\n            }}\r\n            id=\"messages\"\r\n          >\r\n            <ul>\r\n              {debugMessages.map((message: string, index: number) => {\r\n                return <li key={index}>{message}</li>;\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuillEditorComponent;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport QuillComponent from './QuillComponent'\r\n// import QuillEditorComponent from './QuillEditorComponent';\r\n// import QuillViewerComponent from './QuillViewerComponent';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<QuillComponent />, document.getElementById('root'));\r\n\r\n\r\n/* ReactDOM.render(\r\n    <div style={{ height: \"500px\", backgroundColor: \"lightblue\" }}>\r\n      <div style={{ flex: 1, backgroundColor: 'goldenrod' }}>\r\n        <QuillEditorComponent />\r\n      </div>\r\n      <div style={{ flex: 1, backgroundColor: 'lightsalmon' }}>\r\n        <QuillViewerComponent />\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"root\")\r\n  ); */\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}