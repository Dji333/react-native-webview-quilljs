{"version":3,"sources":["QuillComponent.view.tsx","models.ts","QuillComponent.tsx","serviceWorker.js","index.js"],"names":["MessageInstruction","QuillComponentView","addDebugMessage","debugMessages","content","defaultValue","isReadOnly","modules","onChange","onChangeSelection","onFocus","onBlur","onKeyPress","onKeyDown","onKeyUp","onQuillRef","style","toolbar","readOnly","ref","component","value","ContentType","detect","require","QuillEditorComponent","props","quillRef","componentDidMount","setState","browser","state","sendMessage","instruction","QUILL_READY","error","document","addEventListener","handleMessage","DOCUMENT_EVENT_LISTENER_ADDED","window","WINDOW_EVENT_LISTENER_ADDED","componentDidUpdate","prevProps","prevState","isDesktopBrowser","console","log","isEqual","doShowQuillComponentDebugMessages","height","setQuillContainerHeight","toolbarHeight","editor","theme","container","clientHeight","htmlElement","Sizzle","Math","floor","componentWillUnmount","removeEventListener","DOCUMENT_EVENT_LISTENER_REMOVED","WINDOW_EVENT_LISTENER_REMOVED","msg","JSON","stringify","event","data","message","ReactNativeWebView","postMessage","html","delta","source","getContents","CONTENT_CHANGED","payload","getHTML","text","getText","range","ON_CHANGE_SELECTION","selection","getSelection","ON_FOCUS","previousRange","ON_BLUR","ON_KEY_PRESS","ON_KEY_DOWN","ON_KEY_UP","shouldRenderQuillComponentView","find","OS","os","toLowerCase","includes","backgroundColor","this","maxHeight","overflow","padding","position","bottom","left","right","zIndex","id","map","index","key","React","Component","Boolean","location","hostname","match","ReactDOM","render","QuillComponent","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff303c55.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport { Delta } from \"quill\";\n\nimport * as CSS from \"csstype\";\n\ninterface Props {\n  addDebugMessage?: (message: string) => void;\n  content?: string | any | undefined;\n  debugMessages?: string[];\n  defaultValue?: string | any | undefined;\n  height?: number;\n  isReadOnly?: boolean;\n  modules?: object;\n  onChange?: (content: string, delta: Delta, source: any, editor: any) => void;\n  onChangeSelection?: (range: any, source: any, editor: any) => void;\n  onFocus?: (range: any, source: any, editor: any) => void;\n  onBlur?: (previousRange: any, source: any, editor: any) => void;\n  onKeyPress?: (event: any) => void;\n  onKeyDown?: (event: any) => void;\n  onKeyUp?: (event: any) => void;\n  onQuillRef: (quillRef: any) => void;\n  style?: CSS.Properties;\n}\n\nexport const QuillComponentView = ({\n  addDebugMessage = () => {},\n  debugMessages = [],\n  content,\n  defaultValue,\n  isReadOnly = false,\n  modules = {},\n  onChange,\n  onChangeSelection,\n  onFocus,\n  onBlur,\n  onKeyPress,\n  onKeyDown,\n  onKeyUp,\n  onQuillRef,\n  style,\n}: Props) => {\n  const getModules = (): object => {\n    if (isReadOnly) {\n      return {\n        ...modules,\n        toolbar: false\n      };\n    }\n    return modules;\n  };\n\n\n  return (\n    <>\n      <ReactQuill\n        defaultValue={defaultValue}\n        modules={getModules()}\n        onChange={onChange}\n        onChangeSelection={onChangeSelection}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onKeyUp={onKeyUp}\n        readOnly={isReadOnly}\n        ref={(component: any) => {\n          onQuillRef(component);\n        }}\n        style={style}\n        value={content}\n      />\n    </>\n  );\n};\n\nexport default QuillComponentView;\n","import * as React from \"react\";\r\nimport * as Quill from \"quill\";\r\nimport * as ReactQuill from \"react-quill\";\r\nimport { DeltaOperation } from \"quill\";\r\nimport { NativeSyntheticEvent, ViewStyle } from \"react-native\";\r\nimport { WebViewError } from \"react-native-webview/lib/WebViewTypes\";\r\n\r\nexport enum MessageInstruction {\r\n  DOCUMENT_EVENT_LISTENER_ADDED = \"DOCUMENT_EVENT_LISTENER_ADDED\",\r\n  DOCUMENT_EVENT_LISTENER_REMOVED = \"DOCUMENT_EVENT_LISTENER_REMOVED\",\r\n  WINDOW_EVENT_LISTENER_ADDED = \"WINDOW_EVENT_LISTENER_ADDED\",\r\n  WINDOW_EVENT_LISTENER_REMOVED = \"WINDOW_EVENT_LISTENER_REMOVED\",\r\n  QUILL_READY = \"QUILL_READY\",\r\n  GET_CONTENT = \"GET_CONTENT\",\r\n  SET_CONTENT = \"SET_CONTENT\",\r\n  CONTENT_CHANGED = \"CONTENT_CHANGED\",\r\n  UNABLE_TO_ADD_EVENT_LISTENER = \"UNABLE_TO_ADD_EVENT_LISTENER\",\r\n  COMPONENT_MOUNTED = \"COMPONENT_MOUNTED\",\r\n  ON_CHANGE_SELECTION = \"ON_CHANGE_SELECTION\",\r\n  ON_FOCUS = \"ON_FOCUS\",\r\n  ON_BLUR = \"ON_BLUR\",\r\n  ON_KEY_PRESS = \"ON_KEY_PRESS\",\r\n  ON_KEY_DOWN = \"ON_KEY_DOWN\",\r\n  ON_KEY_UP = \"ON_KEY_UP\"\r\n}\r\n\r\nexport interface DeltaObject {\r\n  ops: DeltaOperation[];\r\n}\r\nexport interface ReactNativeWebViewQuillJSComponentProps {\r\n  backgroundColor?: any; // this can be set by user\r\n  containerStyle?: ViewStyle;\r\n  content?: string | DeltaOperation[];\r\n  defaultValue?: string | DeltaOperation[];\r\n  doShowDebugMessages?: boolean;\r\n  doShowQuillComponentDebugMessages: boolean;\r\n  height?: number;\r\n  isReadOnly?: boolean;\r\n  loadingIndicator?: () => React.ReactElement;\r\n  onContentChange?: (content: string, delta: DeltaOperation[]) => void;\r\n  onError?: (syntheticEvent: NativeSyntheticEvent<WebViewError>) => void;\r\n  onLoadEnd?: () => void;\r\n  onLoadStart?: () => void;\r\n  onMessageReceived?: (message: object) => void;\r\n  style?: ViewStyle;\r\n}\r\n\r\nexport interface WebViewQuillJSMessage {\r\n  instruction?: MessageInstruction;\r\n  payload?: SetContentPayload | any;\r\n  error?: string;\r\n}\r\n\r\nexport interface SetContentPayload {\r\n  html: string;\r\n  delta: DeltaOperation[];\r\n}\r\n\r\nexport interface StartupMessage {\r\n  backgroundColor: string;\r\n  defaultValue: string | DeltaOperation[];\r\n  doShowQuillComponentDebugMessages: boolean;\r\n  height: number;\r\n  isReadOnly: boolean;\r\n}\r\n\r\nexport { Quill } from \"quill\";\r\n","import React from \"react\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { Delta, DeltaOperation } from \"quill\";\nimport QuillComponentView from \"./QuillComponent.view\";\nimport { WebViewQuillJSMessage, MessageInstruction } from \"./models\";\nimport Sizzle from \"sizzle\";\n// @ts-ignore\nimport isEqual from \"lodash.isequal\";\nconst { detect } = require(\"detect-browser\");\n\nexport enum ContentType {\n  DELTA = \"DELTA\",\n  HTML = \"HTML\"\n}\ninterface State {\n  backgroundColor: string;\n  browser: { name: string; os: string; version: string } | null;\n  content: string | Delta;\n  defaultValue: string | Delta;\n  delta: DeltaOperation[];\n  debugMessages: string[];\n  doShowQuillComponentDebugMessages: boolean;\n  height: number;\n  html: string;\n  isDesktopBrowser: boolean;\n  isReadOnly: boolean | null;\n  modules: object;\n  toolbarHeight: number;\n}\n\nclass QuillEditorComponent extends React.Component<null, State> {\n  private quillRef = null;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      backgroundColor: 'aliceblue',\n      browser: null,\n      debugMessages: [\"test message\"],\n      doShowQuillComponentDebugMessages: false,\n      defaultValue: \"\",\n      content: \"\",\n      delta: [],\n      height: 300,\n      html: \"\",\n      isDesktopBrowser: false,\n      isReadOnly: null,\n      modules: {},\n      toolbarHeight: 0\n    };\n  }\n\n  componentDidMount = () => {\n    this.setState(\n      {\n        browser: detect(),\n        debugMessages: [...this.state.debugMessages, \"componentDidMount\"]\n      },\n      () => {\n        try {\n          this.sendMessage({\n            instruction: MessageInstruction.QUILL_READY\n          });\n        } catch (error) {\n          this.addDebugMessage(error);\n        }\n\n        if (document) {\n          document.addEventListener(\"message\", this.handleMessage);\n          this.addDebugMessage(\"set document listeners\");\n          this.sendMessage({\n            instruction: MessageInstruction.DOCUMENT_EVENT_LISTENER_ADDED\n          });\n        }\n        if (window) {\n          window.addEventListener(\"message\", this.handleMessage);\n          this.addDebugMessage(\"setting Window\");\n          this.sendMessage({\n            instruction: MessageInstruction.WINDOW_EVENT_LISTENER_ADDED\n          });\n        }\n        if (!document && !window) {\n          this.sendMessage({\n            error: \"UNABLE_TO_ADD_EVENT_LISTENER\"\n          });\n          return;\n        }\n      }\n    );\n  };\n\n  componentDidUpdate = (prevProps: any, prevState: State) => {\n    const { browser, debugMessages, isDesktopBrowser } = this.state;\n    if (debugMessages !== prevState.debugMessages) {\n      console.log(debugMessages);\n    }\n    if (!isEqual(browser, prevState.browser)) {\n      this.setState({ isDesktopBrowser: this.isDesktopBrowser() }, () => {\n        console.log(this.state);\n      });\n    }\n    if (isDesktopBrowser && !prevState.isDesktopBrowser) {\n      this.setState({\n        doShowQuillComponentDebugMessages: true,\n        height: 300\n      });\n    }\n  };\n\n  onQuillRef = (ref: any) => {\n    const { isReadOnly } = this.state;\n    if (this.quillRef === null) {\n      this.quillRef = ref;\n      if (!isReadOnly) {\n        this.setQuillContainerHeight(this.quillRef);\n      }\n    }\n  };\n\n  // adjust the height of the editor container if there is a toolbar added\n  private setQuillContainerHeight = (quillRef: any) => {\n    try {\n      // want to switch this to optional chaining at some point\n      const toolbarHeight =\n        quillRef.editor.theme.modules.toolbar.container.clientHeight;\n      let res: Element[] = Sizzle(\".ql-container\");\n      const htmlElement: HTMLElement = res[0] as HTMLElement;\n      if (htmlElement.style) {\n        htmlElement.style.height = `${Math.floor(this.state.height - toolbarHeight-1)}px`;\n      }\n       \n    } catch (error) {\n     this.addDebugMessage(error);\n    }\n  };\n\n  componentWillUnmount = () => {\n    if (document) {\n      document.removeEventListener(\"message\", this.handleMessage);\n      this.sendMessage({\n        instruction: MessageInstruction.DOCUMENT_EVENT_LISTENER_REMOVED\n      });\n    }\n    if (window) {\n      window.removeEventListener(\"message\", this.handleMessage);\n      this.sendMessage({\n        instruction: MessageInstruction.WINDOW_EVENT_LISTENER_REMOVED\n      });\n    }\n  };\n\n  private addDebugMessage = (msg: any) => {\n    if (typeof msg === \"object\") {\n      this.addDebugMessage(\"STRINGIFIED\");\n      this.setState({\n        debugMessages: [\n          ...this.state.debugMessages,\n          JSON.stringify(msg, null, 4)\n        ]\n      });\n    } else {\n      this.setState({ debugMessages: [...this.state.debugMessages, msg] });\n    }\n  };\n\n  private handleMessage = (event: any) => {\n    this.addDebugMessage(event.data);\n    try {\n      this.setState({ ...this.state, ...event.data });\n    } catch (error) {\n      this.addDebugMessage({ error: JSON.stringify(error) });\n    }\n  };\n\n  protected sendMessage = (message: WebViewQuillJSMessage) => {\n    // @ts-ignore\n    if (window.ReactNativeWebView) {\n      // @ts-ignore\n      window.ReactNativeWebView.postMessage(JSON.stringify(message));\n      console.log(\"sendMessage  \", JSON.stringify(message));\n    }\n  };\n\n  private onChange = (html: string, delta: Delta, source: any, editor: any) => {\n    editor.getContents();\n    this.sendMessage({\n      instruction: MessageInstruction.CONTENT_CHANGED,\n      payload: {\n        html: editor.getHTML(),\n        delta: editor.getContents(),\n        text: editor.getText(),\n        source,\n        editor\n      }\n    });\n  };\n\n  private onChangeSelection = (range: any, source: any, editor: any) => {\n    this.sendMessage({\n      instruction: MessageInstruction.ON_CHANGE_SELECTION,\n      payload: {\n        range,\n        selection: editor.getSelection(),\n        html: editor.getHTML(),\n        delta: editor.getContents(),\n        text: editor.getText(),\n        source,\n        editor\n      }\n    });\n  };\n  private onFocus = (range: any, source: any, editor: any) => {\n    this.sendMessage({\n      instruction: MessageInstruction.ON_FOCUS,\n      payload: { range, source, editor }\n    });\n  };\n  private onBlur = (previousRange: any, source: any, editor: any) => {\n    this.sendMessage({\n      instruction: MessageInstruction.ON_BLUR,\n      payload: { previousRange, source, editor }\n    });\n  };\n  private onKeyPress = (event: any) => {\n    this.sendMessage({\n      instruction: MessageInstruction.ON_KEY_PRESS,\n      payload: { event }\n    });\n  };\n  private onKeyDown = (event: any) => {\n    this.sendMessage({\n      instruction: MessageInstruction.ON_KEY_DOWN,\n      payload: { event }\n    });\n  };\n  private onKeyUp = (event: any) => {\n    this.sendMessage({\n      instruction: MessageInstruction.ON_KEY_UP,\n      payload: { event }\n    });\n  };\n\n  private shouldRenderQuillComponentView = (): boolean => {\n    const { isReadOnly } = this.state;\n    const isDesktopBrowser = this.isDesktopBrowser();\n    return isReadOnly !== null || isDesktopBrowser;\n  };\n\n  private isDesktopBrowser = (): boolean => {\n    const desktopOSNames = [\"windows\"];\n\n    return !!desktopOSNames.find((OS: string) => {\n      let isBrowser = this.state.browser?.os?.toLowerCase().includes(OS);\n      return isBrowser;\n    });\n  };\n\n  render() {\n    const {\n      backgroundColor,\n      content,\n      debugMessages,\n      defaultValue,\n      doShowQuillComponentDebugMessages,\n      height,\n      isReadOnly,\n      toolbarHeight\n    } = this.state;\n    return (\n      <>\n        {this.shouldRenderQuillComponentView() && (\n          // @ts-ignore\n          <QuillComponentView\n            addDebugMessage={this.addDebugMessage}\n            content={content}\n            debugMessages={debugMessages}\n            defaultValue={defaultValue}\n            height={height}\n            onChange={this.onChange}\n            onChangeSelection={this.onChangeSelection}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            onKeyPress={this.onKeyPress}\n            onKeyDown={this.onKeyDown}\n            onKeyUp={this.onKeyUp}\n            isReadOnly={isReadOnly as boolean}\n            onQuillRef={this.onQuillRef}\n            style={{backgroundColor, height: `${height}px`}}\n          />\n        )}\n        {doShowQuillComponentDebugMessages && (\n          <div\n            style={{\n              backgroundColor: \"orange\",\n              maxHeight: \"200px\",\n              overflow: \"auto\",\n              padding: 5,\n              position: \"fixed\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              zIndex: 15000\n            }}\n            id=\"messages\"\n          >\n            <ul>\n              {debugMessages.map((message: string, index: number) => {\n                return <li key={index}>{message}</li>;\n              })}\n            </ul>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default QuillEditorComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuillComponent from './QuillComponent'\n// import QuillEditorComponent from './QuillEditorComponent';\n// import QuillViewerComponent from './QuillViewerComponent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<QuillComponent />, document.getElementById('root'));\n\n\n/* ReactDOM.render(\n    <div style={{ height: \"500px\", backgroundColor: \"lightblue\" }}>\n      <div style={{ flex: 1, backgroundColor: 'goldenrod' }}>\n        <QuillEditorComponent />\n      </div>\n      <div style={{ flex: 1, backgroundColor: 'lightsalmon' }}>\n        <QuillViewerComponent />\n      </div>\n    </div>,\n    document.getElementById(\"root\")\n  ); */\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}